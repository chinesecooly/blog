# 运行用户
user  root;
#启动进程，通常设置成和cpu的数量相等
worker_processes  2;

#全局错误日志及PID文件及存放路径
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#工作模式及连接数上限
events {
    #单个后台work process进程的最大并发链接数
    worker_connections  1024;
}

#网页信息
http {
    #设定mine类型，类型由mine。type文件定义
    include       mime.types;
    default_type  application/octet-stream;

    #设定日志格式
    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #日志文件存储路径/usr/local/...(nginx的安装目录)
    #access_log  logs/access.log  main;
    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    #对于普通应用，必须设为 on,
    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;

    #连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;

    server {
        #监听80端口
        listen       80;
        #定义使用 访问的网址
        server_name  ningyu.ink;
        #设置字符编码
        #charset koi8-r;
        #设定本虚拟主机的访问日志
        #access_log  logs/host.access.log  main;
        #默认请求，优先级最低的配置
#         location / {
#             #定义服务器的默认网站根目录位置 这个root目录其实就是/usr/local目录
#             root   html;
#             # 匹配任何请求，因为所有请求都是以"/"开始
#             # 但是更长字符匹配或者正则表达式匹配会优先匹配
#             #定义首页索引文件的名称
#             index  index.html index.htm;
#         }

        # 对 “/” 启用反向代理,对上面的实例
        location / {
          proxy_pass ningyu.ink:8080;  # 设置要代理的 uri，注意最后的 /。可以是 Unix 域套接字路径，也可以是正则表达式。
          proxy_redirect off; # 设置后端服务器“Location”响应头和“Refresh”响应头的替换文本
          proxy_set_header X-Real-IP $remote_addr; # 获取用户的真实 IP 地址
          #后端的Web服务器可以通过 X-Forwarded-For 获取用户真实IP，多个 nginx 反代的情况下，例如 CDN。参见：http://gong1208.iteye.com/blog/1559835 和 http://bbs.linuxtone.org/thread-9050-1-1.html
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          #以下是一些反向代理的配置，可选。
          proxy_set_header Host $host; # 允许重新定义或者添加发往后端服务器的请求头。
          client_max_body_size 10m; #允许客户端请求的最大单文件字节数
          client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，
          proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)
          proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)
          proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)
          proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小
          proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置
          proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）
          proxy_temp_file_write_size 64k;
          #设定缓存文件夹大小，大于这个值，将从upstream服务器传
        }
    }
}